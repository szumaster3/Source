<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.rsps</groupId>
        <artifactId>530-Source</artifactId>
        <version>1.0.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>Config</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Config</name>

    <properties>
        <kotlin.version>1.8.20</kotlin.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <buildNumber>0</buildNumber>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
    </dependencies>

    <build>

        <plugins>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals><goal>compile</goal></goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>src/main/kotlin</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals><goal>test-compile</goal></goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!--
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>get-build-number</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <doCheck>false</doCheck>
                    <doUpdate>false</doUpdate>
                    <shortRevisionLength>7</shortRevisionLength>
                </configuration>
            </plugin>
            -->

            <!--
            @JvmStatic
            fun duplicateDetection(vararg classes: Class<*>, report: File) {
            val rows = mutableListOf(listOf("Class", "Value", "Fields"))

            for (clazz in classes) {
            val valueMap = mutableMapOf<Int, MutableList<String>>()

            clazz.declaredFields
            .filter {
            java.lang.reflect.Modifier.isStatic(it.modifiers) &&
            java.lang.reflect.Modifier.isFinal(it.modifiers)
            }
            .filter {
            it.type == Int::class.javaPrimitiveType || it.type == Integer::class.java
            }
            .forEach {
            it.isAccessible = true
            val value = it.getInt(null)
            valueMap.getOrPut(value) { mutableListOf() }.add(it.name)
            }

            val duplicates = valueMap.filter { it.value.size > 1 }
            duplicates.forEach { (value, fields) ->
            rows.add(listOf(clazz.simpleName, value.toString(), fields.joinToString(", ")))
            }
            }

            if (rows.size == 1) {
            println("Report complete: no conflicts detected.")
            return
            }
            report.parentFile?.mkdirs()
            report.printWriter().use { out ->
            rows.forEach { row -> out.println(row.joinToString(";")) }
            }

            println("Report completed. Path: [${report.absolutePath}]")
            }

            @JvmStatic
            fun main(args: Array<String>) {
            val reportFile = if (args.isNotEmpty()) File(args[0]) else File("duplicates_report.csv")
            duplicateDetection(
            shared.consts.Graphics::class.java,
            shared.consts.Items::class.java,
            shared.consts.Music::class.java,
            shared.consts.Network::class.java,
            shared.consts.NPCs::class.java,
            shared.consts.Quests::class.java,
            shared.consts.Regions::class.java,
            shared.consts.Scenery::class.java,
            shared.consts.Sounds::class.java,
            shared.consts.Vars::class.java,
            shared.consts.Animations::class.java,
            shared.consts.Components::class.java,
            report = reportFile
            )
            }
            -->
            <!--
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>detect-duplicates</id>
                        <phase>verify</phase>
                        <goals><goal>java</goal></goals>
                        <configuration>
                            <mainClass>shared.utils.DuplicateFinder</mainClass>
                            <arguments>
                                <argument>${project.build.directory}/reports/duplicates_report.csv</argument>
                            </arguments>
                            <classpathScope>runtime</classpathScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->
        </plugins>
    </build>
</project>
